generator client {
  provider      = "prisma-client-js"
  output        = "../__generated__"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum UserRole {
  Regular
  Admin
  SignedInUser
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}
enum ConfirmationType {
  IDENTITY_VERIFICATION
  ACCOMMODATION
  ROOM_CHANGE
  ROOM_VACATION
}

enum ConfirmationStatus {
  PENDING
  APPROVED
  REJECTED
}
model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  displayName        String
  picture            String
  isVerified         Boolean        @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean        @default(false) @map("is_two_factor_enabled")
  method             AuthMethod
  role               UserRole       @default(Regular)
  secondName         String         @map("second_name")
  studentIdFront     String         @map("student_id_front")
  studentIdBack      String?        @map("student_id_back")
  confirmations      Confirmation[] @relation("UserConfirmations")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("users")
}

model Confirmation {
  id         String             @id @default(uuid())
  type       ConfirmationType
  status     ConfirmationStatus @default(PENDING)
  createdAt  DateTime           @default(now())
  resolvedAt DateTime?

  requester User   @relation("UserConfirmations", fields: [userId], references: [id])
  userId    String

  photo      String?
  frontIdUrl String?
  backIdUrl  String?
}



model Token {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  @@map("tokens")
}
