generator client {
  provider      = "prisma-client-js"
  output        = "../__generated__"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum UserRole {
  Regular
  Admin
  SignedInUser
  SuperAdmin
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum ConfirmationType {
  IDENTITY_VERIFICATION
  ACCOMMODATION
  ROOM_CHANGE
  ROOM_VACATION
}

enum ConfirmationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                        String                  @id @default(uuid())
  email                     String                  @unique
  password                  String
  displayName               String
  picture                   String
  isVerified                Boolean                 @default(false) @map("is_verified")
  isTwoFactorEnabled        Boolean                 @default(false) @map("is_two_factor_enabled")
  method                    AuthMethod
  role                      UserRole                @default(Regular)
  secondName                String                  @map("second_name")
  studentIdFront            String                  @map("student_id_front")
  studentIdBack             String?                 @map("student_id_back")
  confirmations             Confirmation[]          @relation("UserConfirmations")
  dormitoryAdminAssignments DormitoryAdmin[]
  dormitory                 Dormitory?              @relation("DormitoryResidents", fields: [dormitoryId], references: [id])
  dormitoryId               String?
  managedDormitories        Dormitory[]             @relation("ManagedDormitories")
  roomId                    String?
  room                      Room?                   @relation(fields: [roomId], references: [id])
  announcements             Announcement[]          @relation("AnnouncementAuthor")
  announcementRecipients    AnnouncementRecipient[] @relation("AnnouncementRecipientUser")
  AuditLog                  AuditLog[]              @relation("UserAuditLogs")
  createdAt                 DateTime                @default(now()) @map("created_at")
  updatedAt                 DateTime                @default(now()) @map("updated_at")

  @@map("users")
}

model DormitoryAdmin {
  id          String    @id @default(uuid())
  userId      String
  dormitoryId String
  role        String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  dormitory   Dormitory @relation(fields: [dormitoryId], references: [id])

  @@unique([userId, dormitoryId]) // один раз призначити
}

model Confirmation {
  id         String             @id @default(uuid())
  type       ConfirmationType
  status     ConfirmationStatus @default(PENDING)
  createdAt  DateTime           @default(now())
  resolvedAt DateTime?

  requester User   @relation("UserConfirmations", fields: [userId], references: [id])
  userId    String

  photo      String?
  frontIdUrl String?
  backIdUrl  String?
}

model Token {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  @@map("tokens")
}

model Dormitory {
  id                     String           @id @default(uuid())
  createdAt              DateTime         @default(now())
  name                   String
  address                String
  groundFloorPhoneNumber String
  status                 String           @default("Active")
  photos                 String[]
  managerId              String?
  manager                User?            @relation("ManagedDormitories", fields: [managerId], references: [id])
  admins                 DormitoryAdmin[]
  residents              User[]           @relation("DormitoryResidents")
  rooms                  Room[]
}

model Room {
  id                     String                  @id @default(uuid())
  number                 String
  floor                  Int
  createdAt              DateTime                @default(now()) @map("created_at")
  capacity               Int
  statuses               RoomStatus[]
  residents              User[]
  roomEquipment          String[]
  photos                 String[]
  dormitoryId            String
  announcementRecipients AnnouncementRecipient[] @relation("AnnouncementRecipientRoom")
  dormitroy              Dormitory               @relation(fields: [dormitoryId], references: [id])
}

model RoomStatus {
  id          String    @id @default(uuid())
  dateOfStart DateTime
  dateOfEnd   DateTime?
  description String

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])
}

model Price {
  id            String    @id @default(uuid())
  roomCapacity  Int
  pricePerMonth Float
  pricePerDay   Float
  dateFrom      DateTime
  dateTo        DateTime?
}

model Announcement {
  id          String                  @id @default(uuid())
  title       String
  content     String
  postedAt    DateTime                @default(now())
  expiresAt   DateTime
  isHidden    Boolean                 @default(false)
  authorId    String
  author      User                    @relation("AnnouncementAuthor", fields: [authorId], references: [id])
  attachments Attachment[]
  recipients  AnnouncementRecipient[]
}

model Attachment {
  id             String       @id @default(uuid())
  url            String
  filename       String
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id])
}

model AnnouncementRecipient {
  id             String       @id @default(uuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  userId         String?
  user           User?        @relation("AnnouncementRecipientUser", fields: [userId], references: [id])
  roomId         String?
  room           Room?        @relation("AnnouncementRecipientRoom", fields: [roomId], references: [id])
  floor          Int?
  forEveryone    Boolean      @default(false)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserAuditLogs", fields: [userId], references: [id]) // ✅ ВИПРАВЛЕНО
  action    String
  entity    String
  entityId  String
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId])
}
